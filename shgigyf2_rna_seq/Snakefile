import pandas as pd
from collections import defaultdict
dir = '/rna/han/gigyf2_nsp2/exp_data/gigyf2_kd_rnaseq'
rootdir = '/papaya/ourseq/2021/20210702-Jimi-GIGYF2-KD-MGIseq'
infodir = '__resources/labels.txt'
info = pd.read_table(infodir).fillna('').astype(str)
for col in ['filepath_r1', 'filepath_r2', 'label']:
    if (info[col] == '').any().any(): raise ValueError('Blank info')
    if info[col].str.startswith('#').any(): raise ValueError('Comments should be removed', col)
    if info[col].duplicated().any(): raise ValueError('Duplicated labels', col)
info = info[['filepath_r1', 'filepath_r2', 'label']]
info = info.set_index('label')
samples = info.T.to_dict()
fraglen = 300
thread = 32
################################################################################
TARGETS = [ #expand('rawdata/{sample}.r1.fq.gz', sample=samples),
            #expand('rawdata/{sample}.fastqc.html',sample=samples),
            'results/summary_graph.png',
            'results/featurecount.csv',
            'png/featurecount_scatter.png',
           ]

################################################################################

rule all:
    input: TARGETS

################################################################################
rule rename:
    input: r1 = lambda wildcards: rootdir + samples[wildcards.sample]['filepath_r1'].strip("raw_files"), \
           r2 = lambda wildcards: rootdir + samples[wildcards.sample]['filepath_r2'].strip("raw_files")
    output: r1 = 'rawdata/{sample}.r1.fastq.gz', \
            r2 = 'rawdata/{sample}.r2.fastq.gz'
    threads: 8
    priority: 50
    shell: 'cp {input.r1} {output.r1} &&'
           'cp {input.r2} {output.r2}'

rule qc_stats:
    input: 'rawdata/{sample}.r1.fastq.gz'
    output: 'rawdata/{sample}.r1.fastqc.html'
    threads: 8
    shell: 'fastqc -t {threads} -o rawdata {input}'

rule STAR_index:
    input: fa = '{ref_dir}/genomic.fna',
           gff = '{ref_dir}/genomic.gtf'
    output: '{ref_dir}/star_{sjdb}/Genome'
    threads: 128
    run:
        idx_dir = str(output).replace("/Genome","")
        shell('STAR --runThreadN {threads} --runMode genomeGenerate --genomeDir {idx_dir} \
               --genomeFastaFiles {input.fa} --sjdbGTFfile {input.gff} --sjdbOverhang {wildcards.sjdb}')

rule align:
    input: r1 = dir + '/rawdata/{sample}.r1.fastq.gz', r2 = dir + '/rawdata/{sample}.r2.fastq.gz',
           idx = '/rna/han/gigyf2_nsp2/exp_data/fclip_seq/HD/grch38_sars_cov_2/star_{sjdb}/Genome'.format(sjdb=fraglen-1)
    output: 'alignments/{sample}.total.bam'
    threads: thread
    run:
        out_pfx = 'alignments/' + wildcards.sample + '.'
        tmpdir = 'alignments/' + wildcards.sample + '.tmp'
        index = str(input.idx).replace('/Genome', "")
        shell('STAR --runThreadN {threads} --readFilesIn {input.r1} {input.r2} --readFilesCommand zcat \
               --alignEndsType Local --genomeDir {index} --genomeLoad LoadAndRemove \
               --outStd BAM_SortedByCoordinate --outSAMtype BAM SortedByCoordinate --outSAMunmapped None \
               --outFilterType BySJout --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 \
               --alignSJstitchMismatchNmax -1 -1 -1 -1 --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 \
               --outFilterMismatchNoverReadLmax 0.04 --outFilterMismatchNmax 999 --outFilterMultimapNmax 20 \
               --scoreGapNoncan -4 --scoreGapATAC -4 \
               --outSJfilterOverhangMin 12 12 12 12 --outSJfilterCountUniqueMin 1 1 1 1 \
               --outSJfilterCountTotalMin 1 1 1 1 --outSJfilterDistToOtherSJmin 0 0 0 0 \
               --chimOutType WithinBAM HardClip --chimScoreJunctionNonGTAG 0 --chimSegmentMin 20 \
               --limitBAMsortRAM 100000000000 --outTmpDir {tmpdir} --outFileNamePrefix {out_pfx} > {output[0]}')

rule uniq:
    input: 'alignments/{sample}.total.bam'
    output: bam='alignments/{sample}.uniq.bam', bai='alignments/{sample}.uniq.bam.bai'
    threads: 8
    run:
        shell('samtools view -b -@ {threads} -q 4 {input} -o {output.bam}')
        shell('samtools index {output.bam}')

## Get preprocessing and alignment summary
rule get_summary:
    input: dir + '/rawdata/{sample}.r1.fastq.gz',
           'alignments/{sample}.total.bam', 'alignments/{sample}.uniq.bam'
    output: 'alignments/{sample}.summary'
    threads: 8
    run:
        shell('unpigz -p {threads} {input[0]} -c | awk "END {{print NR / 4}}" >> {output}')
        for i in range(1, 3):
            inputfile = str(input[i])
            shell('samtools view -@ {threads} -F 256 -c {inputfile} | awk \'{{print $1 / 2}}\' >> {output}')

rule summary_graph:
    input: ['alignments/' + x + '.summary' for x in samples]
    output: 'results/summary_graph.png'
    shell: 'mkdir results -p &&'
           'python /rna/han/__resources/tools/rna_summary_graph_cov2.py {output}'

rule sort_bam:
    input: 'alignments/{sample}.uniq.bam'
    output: temp('featurecount/{sample}.uniq.bam')
    threads: 8
    shell: 'samtools sort -@ {threads} -n -o {output} {input}'

rule featurecount:
    input: 'featurecount/' + x + '.uniq.bam' for x in samples
    output: 'featurecount/{sample}.txt'
    params: bam = 'featurecount/{sample}.uniq.bam',
            annot = '/rna/han/gigyf2_nsp2/exp_data/fclip_seq/HD/grch38_sars_cov_2/genomic.gtf'
    threads: 16
    shell: 'featureCounts -a {params.annot} -p -s 2 -T {threads} --countReadPairs -o {output} {params.bam}'

rule featurecount_count:
    input: 'featurecount/' + x + '.txt' for x in samples
    output: 'results/featurecount.csv'
    params: 'host'
    shell: 'mkdir results -p &&'
           'python /rna/han/__resources/tools/featurecount.py {params}'

rule scatter:
    input: 'results/{quant}.csv'
    output: 'png/{quant}_scatter.png'
    shell: 'mkdir -p png && mkdir -p pdf &&'
           'python /rna/han/__resources/tools/rpm_scatter.py {input} {output}'

# vim: et syntax=snakemake